module(
    name = "robotpy-bazel",
    version = "1.0.0"
)

bazel_dep(name = "rules_python", version = "1.3.0")
single_version_override(
    module_name = "rules_python",
    version = "1.3.0",
    patches = [
        "//:third_party/rules_python/0001-Ignore-uv-build-artifacts-in-manifest.patch",
        "//:third_party/rules_python/0002-Make-uv-current-toolchain-visibility-public.patch",
    ],
    patch_strip = 1,
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(python_version = "3.11")
python.toolchain(python_version = "3.13")
use_repo(python, "python_3_11", "python_3_13", "python_versions")

uv = use_extension(
    "@rules_python//python/uv:uv.bzl",
    "uv",
    # Use `dev_dependency` so that the toolchain isn't defined when this module
    # is used elsewhere.
    dev_dependency = True,
)
uv.configure(version = "0.6.14")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "robotpy_bazel_pip_deps",
    python_version = "3.11",
    requirements_lock = "//:requirements_lock.txt",
    experimental_index_url = "https://pypi.org/simple",
    download_only = True,
)
pip.parse(
    hub_name = "robotpy_bazel_pip_deps",
    python_version = "3.13",
    requirements_lock = "//:requirements_lock.txt",
    experimental_index_url = "https://pypi.org/simple",
    download_only = True,
)
use_repo(pip, "robotpy_bazel_pip_deps")

bazel_dep(name = "rules_pkg", version = "1.1.0")

bazel_dep(name = "com_github_mvukov_rules_ros2", version = "0.0.0")
git_override(
    module_name = "com_github_mvukov_rules_ros2",
    remote = "https://github.com/mvukov/rules_ros2.git",
    commit = "734502ebb65e3c8d23cf33523adbdc930aa53f30",
)

rules_ros2_non_module_deps = use_extension("@com_github_mvukov_rules_ros2//ros2:extensions.bzl", "non_module_deps")
use_repo(
    rules_ros2_non_module_deps,
    "ros2_common_interfaces",
    "ros2_rclpy",
    # ros2cli and ros2_launch_ros are required to run a ros2_launch target
    "ros2cli",
    "ros2_launch_ros",
    # ros2launch is required to test a ros2_test target
    "ros2_launch",
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "aarch64_glibc_stable_2022-08-1",
    url = "https://developer.nvidia.com/downloads/embedded/l4t/r36_release_v3.0/toolchain/aarch64--glibc--stable-2022.08-1.tar.bz2",
    sha256 = "8af54f268c462b2d0737df8789b5e35db03a2d1ecbec90e20948f66f9244fcdd",
    strip_prefix = "aarch64--glibc--stable-2022.08-1/aarch64-buildroot-linux-gnu/",
    patch_cmds = ["cp -r include/c++ sysroot/usr/include"],
    build_file_content = """filegroup(
    name = "sysroot",
    srcs = glob(["sysroot/**"]),
    visibility = ["//visibility:public"],
)
"""
)

new_local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "new_local_repository")
new_local_repository(
    name = "nvidia_jetson_sysroot",
    path = "third_party/nvidia_jetson_sysroot",
    build_file_content = """
filegroup(
    name = "files",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
"""
)

bazel_dep(name = "toolchains_llvm", version = "1.4.0")
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")

llvm.toolchain(
    name = "llvm_toolchain_for_nvidia_jetson",
    cxx_standard = {"": "c++20"},
    llvm_version = "19.1.1",
    stdlib = {"linux-aarch64": "stdc++"},
    cxx_builtin_include_directories = {
      "linux-aarch64": [
        "%sysroot%/usr/include",
        "%sysroot%/usr/lib",
        # "external/_main~_repo_rules~nvidia_jetson_sysroot/usr/include",
        # "external/_main~_repo_rules~nvidia_jetson_sysroot/usr/lib",
        # "/home/sanjay.narayanan/code/robotpy-bazel/third_party/nvidia_jetson_sysroot/usr/include",
        # "/home/sanjay.narayanan/code/robotpy-bazel/third_party/nvidia_jetson_sysroot/usr/lib",
      ],
    },
)
llvm.sysroot(
    name = "llvm_toolchain_for_nvidia_jetson",
    label = "@aarch64_glibc_stable_2022-08-1//:sysroot",
    # label = "@nvidia_jetson_sysroot//:files",
    targets = ["linux-aarch64"],
)
# TODO(Sanjay): Use llvm.extra_target_compatible_with to only use this when compiling for Nvidia Jetson.
use_repo(llvm, "llvm_toolchain_for_nvidia_jetson")

register_toolchains("@llvm_toolchain_for_nvidia_jetson//:all")
bazel_dep(name = "rules_cc", version = "0.1.1")
